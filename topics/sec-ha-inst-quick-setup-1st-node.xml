<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<topic xmlns="http://docbook.org/ns/docbook"
 xml:id="sec-ha-inst-quick-setup-1st-node">
 <title>Setting Up the First Node</title>
 <para> Set up the first node with the <command>ha-cluster-init</command>
  script. This requires only a minimum of time and manual intervention. </para>
 <procedure xml:id="pro-ha-inst-quick-setup-ha-cluster-init">
  <title>Setting Up the First Node (<systemitem class="server"
    >alice</systemitem>) with <command>ha-cluster-init</command></title>
  <step>
   <para> Log in as <systemitem class="username">root</systemitem> to the
    physical or virtual machine you want to use as cluster node. </para>
  </step>
  <step>
   <para> Start the bootstrap script by executing: </para>
   <screen><prompt role="root">root # </prompt><command>ha-cluster-init</command> --name <replaceable>CLUSTERNAME</replaceable></screen>
   <para>Replace the <replaceable>CLUSTERNAME</replaceable> placeholder with a
    meaningful name, like the geographical location of your cluster (for
    example, <literal>amsterdam</literal>). This is especially helpful if you
    want to create a Geo cluster later on, as it simplifies the identification
    of a site. If you run the command without the <option>--name</option>
    option, the default name is <literal>hacluster</literal>. </para>
   <remark>toms 2016-08-11: the following para relates to (a) FATE#320604 allow
    unicast, (b) FATE#320605 identify AWS and use unicast</remark>
   <para> If you need unicast instead of multicast (the default) for your
    cluster communication, use the option <option>-u</option>. After
    installation, find the value <literal>udpu</literal> in the file
     <filename>/etc/corosync/corosync.conf</filename>. If
     <command>ha-cluster-init</command> detects a node running on Amazon Web
    Services (AWS), the script will use unicast automatically as default for
    cluster communication. </para>
   <para> The scripts checks for NTP configuration and a hardware watchdog
    service. It generates the public and private SSH keys used for SSH access
    and Csync2 synchronization and starts the respective services. </para>
   <!--<itemizedlist>
     <listitem>
      <para>Checks for a hardware watchdog device.</para>
     </listitem>
     <listitem>
      <para>
       Generate the public and private SSH keys, used for SSH access and
       &csync; syncronization.
      </para>
     </listitem>
     <listitem>
      <para>Start the SSH and &csync; services.</para>
     </listitem>
    </itemizedlist>-->
  </step>
  <step>
   <para> Configure the cluster communication layer (Corosync): </para>
   <substeps>
    <step>
     <para> Enter a network address to bind to. By default, the script will
      propose the network address of <systemitem>eth0</systemitem>.
      Alternatively, enter a different network address, for example the address
      of <literal>bond0</literal>. </para>
    </step>
    <step>
     <para> Enter a multicast address. The script proposes a random address that
      you can use as default. Of course, your particular network needs to
      support this multicast address. </para>
    </step>
    <step>
     <para> Enter a multicast port. The script proposes <literal>5405</literal>
      as default. </para>
    </step>
   </substeps>
  </step>
  <step>
   <para> Finally, the script will start the Pacemaker service to bring the
    one-node cluster online and enable Hawk2. The URL to use for Hawk2 is
    displayed on the screen. </para>
  </step>
  <step>
   <para> Set up SBD as node fencing mechanism:</para>
   <substeps>
    <step>
     <para>Confirm with <literal>y</literal> that you want to use SBD.</para>
    </step>
    <step>
     <para>Enter a persistent path to the partition of your block device that
      you want to use for SBD, see <xref linkend="sec-ha-inst-quick-sbd"/>. The
      path must be consistent across all nodes in the cluster.</para>
    </step>
   </substeps>
  </step>
  <step xml:id="st-ha-cluster-init-ip">
   <!-- taroth 2015-09-22: fate#318549: cluster-init: configure virtual IP for HAWK  -->
   <para>Configure a virtual IP address for cluster administration with Hawk2.
    (We will use this virtual IP resource for testing successful failover later
    on).</para>
   <substeps>
    <step>
     <para>Confirm with <literal>y</literal> that you want to configure a
      virtual IP address.</para>
    </step>
    <step>
     <para>Enter an unused IP address that you want to use as administration IP
      for Hawk2: <literal>192.168.2.1</literal>
     </para>
     <para>Instead of logging in to an individual cluster node with Hawk2, you
      can connect to the virtual IP address.</para>
    </step>
   </substeps>
  </step>
 </procedure>
 <para> You now have a running one-node cluster. To view its status, proceed as
  follows: </para>
 <procedure xml:id="pro-ha-inst-quick-hawk2-login">
  <title>Logging In to the Hawk2 Web Interface</title>
  <step>
   <para> On any machine, start a Web browser and make sure that JavaScript and
    cookies are enabled. </para>
  </step>
  <step>
   <para> As URL, enter the IP address or host name of any cluster node running
    the Hawk Web service. Alternatively, enter the address of the virtual IP
    address that you configured in <xref linkend="st-ha-cluster-init-ip"/> of
     <xref linkend="pro-ha-inst-quick-setup-ha-cluster-init"/>: </para>
   <screen>https://<replaceable>HAWKSERVER</replaceable>:7630/</screen>
   <note>
    <title>Certificate Warning</title>
    <para> If a certificate warning appears when you try to access the URL for
     the first time, a self-signed certificate is in use. Self-signed
     certificates are not considered trustworthy by default. </para>
    <para> Ask your cluster operator for the certificate details to verify the
     certificate. </para>
    <para> To proceed anyway, you can add an exception in the browser to bypass
     the warning. </para>
    <!--FIXME: HAWK1 - see https://bugzilla.suse.com/show_bug.cgi?id=979095
      <para> For information on how to replace the self-signed certificate with a
      certificate signed by an official Certificate Authority, refer to
      <xref linkend="vle-ha-hawk-certificate"/>.</para>-->
   </note>
  </step>
  <step>
   <para> On the Hawk2 login screen, enter the <guimenu>Username</guimenu> and
     <guimenu>Password</guimenu> of the user that has been created during the
    bootstrap procedure (user <systemitem class="username"
     >hacluster</systemitem>, password <literal>linux</literal>).</para>
   <important>
    <title>Secure Password</title>
    <para>Replace the default password with a secure one as soon as possible: </para>
    <screen><prompt role="root">root # </prompt><command>passwd</command> hacluster</screen>
   </important>
  </step>
  <step>
   <para> Click <guimenu>Log In</guimenu>. After login, the Hawk2 Web interface
    shows the Status screen by default, displaying the current cluster status at
    a glance: </para>
   <figure xml:id="fig-ha-inst-quick-one-node-status">
    <title>Status of the One-Node Cluster in Hawk2</title>
    <mediaobject>
     <imageobject>
      <imagedata width="80%" fileref="installquick-one-nodecluster.png"/>
     </imageobject>
    </mediaobject>
   </figure>
  </step>
 </procedure>
</topic>
